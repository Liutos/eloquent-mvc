(in-package #:eloquent.mvc.config)

(defclass <config> ()
  ((content :documentation "Object generated by CL-YAML:PARSE"
            :initarg :content
            :reader config-content
            :type hash-table))
  (:documentation "Configurations for the eloquent-mvc project"))

(define-condition invalid-config-error (error)
  ((path
    :documentation "The OGNL path to retrive the configuration value"
    :initarg :path)
   (value
    :documentation "The value which is invalid"
    :initarg :value))
  (:report (lambda (c stream)
             (with-slots (path value) c
               (format stream "Invalid value \"~A\" for configuration \"~A\""
                       value path)))))

(defun get (config section-name option-name)
  "Return the raw value belongs to key OPTION-NAME from section SECTION-NAME in CONFIG."
  (declare (type string option-name section-name))
  (declare (type <config> config))
  (with-slots (content) config
    (multiple-value-bind (section found)
        (gethash section-name content)
      (when found
        (gethash option-name section)))))

;;; EXPORT

(defun get-application-root (config)
  "Return the project's root directory specified in CONFIG."
  (get config "application" "root"))

(defun get-log-directory (config)
  "Return the root directory for puting log files, from CONFIG."
  (get config "log" "directory"))

(defun get-server-port (config)
  "Return the port number to be listened when setting up a server, from CONFIG."
  (get config "server" "port"))

(defun get-server-server (config)
  "Return the name of the server to be started by CLACK:CLACKUP."
  (check-type config eloquent.mvc.config:<config>)
  (let ((server (get config "server" "server"))
        (valid-servers '(:fcgi :hunchentoot :toot :woo :wookie)))
    (unless (member server valid-servers :test #'string-equal)
      (error 'invalid-config-error
             :path "server.server"
             :value server))
    (alexandria:make-keyword
     (string-upcase server))))
