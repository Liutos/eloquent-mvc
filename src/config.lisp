(defpackage #:eloquent.mvc.config
  (:use #:cl)
  (:shadow #:get)
  (:export #:<config>
           #:*config*
           #:parse
           #:get
           #:get-application-root
           #:get-cron-jobs
           #:get-cron-log
           #:get-log-directory
           #:get-server-port
           #:get-server-server
           #:get-template-directory))

(in-package #:eloquent.mvc.config)

;;; export

(defclass <config> ()
  ((base :accessor config-base
         :documentation "A <CONFIG> instance contains default configurations"
         :type <config>)
   (content :documentation "Object generated by CL-YAML:PARSE"
            :initarg :content
            :reader config-content
            :type hash-table))
  (:documentation "Configurations for the eloquent-mvc project"))

(define-condition invalid-config-error (error)
  ((path
    :documentation "The OGNL path to retrive the configuration value"
    :initarg :path)
   (value
    :documentation "The value which is invalid"
    :initarg :value))
  (:report (lambda (c stream)
             (with-slots (path value) c
               (format stream "Invalid value \"~A\" for configuration \"~A\""
                       value path)))))

(defvar *config* nil
  "The object contains the runtime configuration.")

(defgeneric parse (config-path)
  (:documentation "Reads file content from CONFIG-PATH, one or many, and returns an instance contains configurations."))

(defmethod parse ((config-paths list))
  "Read content from many files specified in CONFIG-PATHS, embed one into another, and returns a single instance contains all the configurations."
  (labels ((aux (base rest)
             (cond ((null rest) base)
                   (t (let* ((filename (first rest))
                             (config (parse filename)))
                        (setf (config-base config) base)
                        (aux config (rest rest)))))))
    (aux nil config-paths)))

(defmethod parse ((filename pathname))
  "Read content from a file specified by FILENAME, parse it and return the parsing result."
  (let* ((env `(:user-homedir-pathname ,(user-homedir-pathname)))
         (text (cl-emb:execute-emb filename :env env))
         (content (cl-yaml:parse text)))
    (make-instance '<config>
                   :content content)))

(defun get (config section-name option-name)
  "Return the raw value belongs to key OPTION-NAME from section SECTION-NAME in CONFIG."
  (check-type config <config>)
  (check-type section-name string)
  (check-type option-name string)
  (with-slots (content) config
    (multiple-value-bind (section found)
        (gethash section-name content)
      (cond (found (gethash option-name section))
            ((config-base config)
             (get (config-base config) section-name option-name))))))

(defun get-application-root (config)
  "Return the project's root directory specified in CONFIG."
  (get config "application" "root"))

(defun get-cron-jobs (config)
  "Return a pathname object indicating a file contains the jobs executed periodly. Return NIL if there's no such a file."
  (let ((path (get config "cron" "jobs")))
    (and path (pathname path))))

(defun get-cron-log (config)
  "Return the pathname of log file for writting by CL-CRON:LOG-CRON-MESSAGE."
  (get config "cron" "log"))

(defun get-log-directory (config)
  "Return the root directory for puting log files, from CONFIG."
  (pathname (get config "log" "directory")))

(defun get-server-port (config)
  "Return the port number to be listened when setting up a server, from CONFIG."
  (get config "server" "port"))

(defun get-server-server (config)
  "Return the name of the server to be started by CLACK:CLACKUP."
  (check-type config eloquent.mvc.config:<config>)
  (let ((server (get config "server" "server"))
        (valid-servers '(:fcgi :hunchentoot :toot :woo :wookie)))
    (unless (member server valid-servers :test #'string-equal)
      (error 'invalid-config-error
             :path "server.server"
             :value server))
    (alexandria:make-keyword
     (string-upcase server))))

(defun get-template-directory (config)
  "Return the path of directory contains template files."
  (check-type config <config>)
  (let ((directory (get config "template" "directory")))
    (or directory
        (merge-pathnames "app/template/"
                         (get-application-root config)))))
