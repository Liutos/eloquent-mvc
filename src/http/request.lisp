(defpackage #:eloquent.mvc.request
  (:use :cl)
  (:export #:<request>
           ;; accessor
           #:request-content-type
           #:request-method
           #:request-path-info
           #:request-query-string
           #:request-remote-addr
           #:request-server-protocol
           #:request-uri
           #:request-url-scheme
           ;; method
           #:request-string-body

           #:env-to-request
           #:get-cookie
           #:get-header
           #:getextra
           #:request-body))

(in-package #:eloquent.mvc.request)

(defclass <http-request> ()
  ((clack.streaming :documentation "Directly from Clack"
                    :initarg :clack.streaming
                    :type boolean)
   (content-length :documentation "The Content-Length field in request headers"
                   :initarg :content-length
                   :reader request-content-length
                   :type fixnum)
   (content-type :documentation "The Content-Type field in request headers"
                 :initarg :content-type
                 :reader request-content-type
                 :type string)
   (headers :documentation "All HTTP headers from request"
            :initarg :headers
            :reader request-headers
            :type hash-table)
   (path-info :documentation "Directly from Clack"
              :initarg :path-info
              :reader request-path-info
              :type string)
   (query-string :documentation "The query string part in request URL"
                 :initarg :query-string
                 :reader request-query-string
                 :type string)
   (raw-body :documentation "A input stream contains the HTTP body's content"
             :initarg :raw-body
             :reader request-raw-body
             :type stream)
   (remote-addr :documentation "The IP address of the client"
                :initarg :remote-addr
                :reader request-remote-addr
                :type string)
   (remote-port :documentation "The port bind by the client-side socket"
                :initarg :remote-port
                :reader request-remote-port
                :type fixnum)
   (request-method :documentation "The HTTP method used by client"
                   :initarg :request-method
                   :reader request-method
                   :type keyword)
   (request-uri :documentation "Directly from Clack"
                :initarg :request-uri
                :reader request-uri
                :type string)
   (script-name :documentation "Directly from Clack"
                :initarg :script-name
                :reader request-script-name
                :type string)
   (server-name :documentation "Directly from Clack"
                :initarg :server-name
                :reader request-server-name
                :type string)
   (server-port :documentation "The port listen by the server-side socket"
                :initarg :server-port
                :reader request-server-port
                :type fixnum)
   (server-protocol :documentation "Directly from Clack"
                    :initarg :server-protocol
                    :reader request-server-protocol
                    :type keyword)
   (url-scheme :documentation "The scheme in the request URL"
               :initarg :url-scheme
               :reader request-url-scheme
               :type keyword))
  (:documentation "A HTTP request"))

(defclass <request> (<http-request>)
  ((extras :documentation "The keys and values set by middlewares"
           :initarg :extras
           :initform (make-hash-table :test 'eql)
           :reader request-extras
           :type hash-table)
   (string-body :documentation "The content as string in incoming HTTP body"
                :initform nil
                :type string))
  (:documentation "Request includes the HTTP request and extra information generated by middlewares"))

(defgeneric request-string-body (request)
  (:documentation "Read the value from slot STRING-BODY. If this slot is unbound, extract bytes from stream stored in slot RAW-BODY, converts into a string and store in this slot, then return it"))

(defmethod request-string-body ((request <request>))
  (with-slots (raw-body string-body) request
    (unless string-body
      (let ((bytes (make-array (request-content-length request)
                               :element-type '(unsigned-byte 8))))
        (read-sequence bytes raw-body)
        (setf string-body
              (flexi-streams:octets-to-string bytes :external-format :utf-8))))
    string-body))

(defun env-to-request (env)
  "Initialize a instance of ``eloquent.mvc.request:<request>'' by key-values from ENV."
  (apply #'make-instance '<request>
         :allow-other-keys t
         env))

(defun get-cookie (request field)
  "Returns the value of FIELD in REQUEST's Cookie."
  (check-type field string)
  (check-type request <request>)
  (let ((cookie-string (get-header request "cookie")))
    (when (null cookie-string)
      (return-from get-cookie nil))
    (let ((cookie (eloquent.mvc.prelude:parse-cookie-string cookie-string)))
      (eloquent.mvc.base:alist-get cookie field))))

(defun get-header (request field)
  "Return the value of FIELD in request's headers."
  (declare (type string field))
  (with-slots (headers) request
    (gethash field headers)))

(defun getextra (key req)
  "Get the extra information named KEY from REQ."
  (declare (type <request> req))
  (with-slots (extras) req
    (gethash key extras)))

(defun (setf getextra) (value key req)
  "Set the value of extra information named KEY in REQ, to the value VALUE."
  (declare (type <request> req))
  (with-slots (extras) req
    (setf (gethash key extras) value)))

(defun request-body (request)
  "Returns the HTTP body parsed from REQUEST."
  (check-type request <request>)
  (eloquent.mvc.request:getextra :body request))
